BALLOON TAP
------------------------------------------------
crear una variable -->  LOCAL
nombre de la variable --> local = BACKGROUND
signo '=' --> ASIGNAR VARIABLEÇ
cargar imagen --> display.newImageRect() [permite cambiar el tamaño o escalar la imagen]
centrar imagen en un eje X --> background.x = display.contentCenterX [igual para el eje Y]
colocar en una altura determianda --> platform.y = display.contentHeight-25
transparencia --> balloon.alpha = 0.8
aplicar físicas --> local physics = require( "physics" )
iniciar motor de físicas --> physics.start()
convertir objetos / imagenes en objetos físicos --> physics.addBody

physics.addBody(balloon, "dynamic", {radius=50, bounce=0.3});
                          dinamico     forma      rebote siendo 1 su 100%
                                      redonda

funciones --> local function nameFunction() ... end
aplicar fuerzas --> balloon:applyLinearImpulse(0, 0.75, balloon.x, balloon.y)
                    los dos primeros parametros le indican cuanta fuerza tienen que aplicar
                    el primer valor para el eje X y el segundo para el Y
                    los dos ultimos valores le indican al motor hacia donde aplicar la fuerza en relación al globo

Primero, debemos decirle a Solar2D qué objeto está involucrado en el detector de eventos. Para este juego, 
queremos detectar un evento relacionado directamente con el balloonobjeto.

Inmediatamente después de esto, agregue dos puntos ( :) y luego addEventListener. En Lua, 
esto se llama método de objeto . Esencialmente, addEventListenerdespués de los dos puntos, le dice a Solar2D 
que queremos agregar un detector de eventos balloon, especificado antes de los dos puntos.

Dentro de los paréntesis hay dos parámetros que completan el comando. El primer parámetro 
es el tipo de evento que escuchará Solar2D, en este caso "tap". El segundo parámetro es la función 
que se debe ejecutar (llamar) cuando ocurre el evento, en este caso la pushBalloon()función que escribimos 
en la sección anterior. Básicamente, le estamos diciendo a Solar2D que ejecute la pushBalloon()función cada vez 
que el usuario toque el globo.





STAR EXPLORER
----------------------------------------------
El build.settingsarchivo proporciona a los dispositivos reales (teléfonos, tabletas, etc.) los detalles 
que necesitan con respecto a su aplicación. Esto incluye las orientaciones admitidas para la aplicación, 
nombres de archivos de iconos, complementos para incluir, información especial requerida por los 
dispositivos y más.

build.settings
default = "portrait",--> Esta línea especifica que el juego debe comenzar en orientación vertical cuando 
el usuario carga la aplicación por primera vez.

supported = { "portrait", },-->  Esta línea especifica que la única orientación admitida también es vertical. 
Eso significa que incluso si el usuario gira (orienta) el dispositivo físico en sus manos, su aplicación 
permanecerá bloqueada en orientación vertical.

config.lua
scale--> sta importante configuración especifica cómo manejar el área de contenido para pantallas que no 
coinciden con la relación de aspecto definida por la configuración widthy height, por ejemplo, 3: 4 en este 
caso. Las dos opciones más comunes son "letterbox"y "zoomEven".

letterbox --> escala el área de contenido para llenar la pantalla mientras conserva la misma relación de aspecto. 
Toda el área de contenido residirá en la pantalla, pero esto puede resultar en "barras negras" en dispositivos con 
relaciones de aspecto que difieren de la relación de aspecto de su contenido. Sin embargo, tenga en cuenta que aún 
puede utilizar esta área "en blanco" y llenarla con elementos visuales colocándolos o extendiéndolos fuera de los 
límites del área de contenido. Esencialmente, "letterbox"es un modo de escala ideal si desea asegurarse de que todo 
en su área de contenido aparezca dentro de los límites de la pantalla en todos los dispositivos.

zoomEven --> escala el área de contenido para llenar la pantalla mientras conserva la misma relación de aspecto. 
Parte del contenido puede "sangrar" de los bordes de la pantalla en dispositivos con proporciones que difieren de la 
proporción de su contenido. Básicamente, "zoomEven"es una buena opción para asegurarse de que toda la pantalla esté llena 
con el área de contenido en todos los dispositivos (y el recorte de contenido cerca de los bordes exteriores es aceptable).

physics.setGravity()--> simula la gravedad en el eje X como en el Y, Para que no se aplique gravedad -> (0,0)

        **El orden en el que declara cada imagen dentro de una hoja es muy importante; más adelante, cuando cargue una imagen de una 
        hoja usando un comando como display.newImageRect(), deberá especificar el número del marco en función del orden en el que fue 
        declarado en la configuración de la hoja.**

graphics.newImageSheet() --> esto acepta el nombre del archivo de imagen para la hoja de imagen ( gameObjects.png) y una referencia a la sheetOptionstabla que acabamos de crear:
local asteroidTable ={} --> matriz

ship = display.newImageRect( mainGroup, objectSheet, 4, 98, 79 )
    El primer parámetro especifica el grupo de visualización en el que se colocará el objeto ( mainGroup). (no simplemente en el escenario).

    El segundo parámetro es la referencia a la hoja de imagen que cargamos anteriormente ( objectSheet).

    Dado que el barco es el cuarto fotograma en nuestra configuración de hoja de imagen, lo especificamos 4como el número de fotograma (tercer parámetro).

    Finalmente, como de costumbre, establecemos el ancho y el alto en 98y 79, haciendo coincidir los valores del marco widthy heighten la configuración de la hoja de imagen.

concatenación --> ..